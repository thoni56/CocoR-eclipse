package at.ssw.coco.lib.model.scanners.types;

/**
 * A State represents a distinct Partition within the ATG File.
 *
 * @author Andreas Woess <andwoe@users.sf.net>
 * @author Andreas Greilinger <Andreas.Greilinger@gmx.net>
 * @author Konstantin Bina <Konstantin.Bina@gmx.at>
 */

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import at.ssw.coco.lib.model.scanners.ATGPartitions;

public enum State {
	
	DEFAULT(ATGPartitions.DEFAULT), // Coco grammar or configuration
	IMPORTS(ATGPartitions.IMPORTS), // Java imports
	PARSER_CODE(ATGPartitions.PARSER_CODE), // Java code
	INLINE_CODE(ATGPartitions.INLINE_CODE), // Java code
	COMPILER_KEYWORD(ATGPartitions.COMPILER_KEYWORD), // COMPILER keyword
	COMPILER_IDENT(ATGPartitions.COMPILER_IDENT), // COMPILER ident
			
	IGNORECASE_SEGMENT(ATGPartitions.IGNORECASE_SEGMENT),	//IGNORECASE code
	CHARACTERS_SEGMENT(ATGPartitions.CHARACTERS_SEGMENT), 	//CHARACTERS code
	TOKENS_SEGMENT(ATGPartitions.TOKENS_SEGMENT), 			//TOKENS code
	PRAGMAS_SEGMENT(ATGPartitions.PRAGMAS_SEGMENT), 		//PRAGMAS code
	COMMENTS_SEGMENT(ATGPartitions.COMMENTS_SEGMENT), 		//COMMENTS code
	IGNORE_SEGMENT(ATGPartitions.IGNORE_SEGMENT), 			//IGNORE code		
	PRODUCTIONS_SEGMENT(ATGPartitions.PRODUCTIONS_SEGMENT), //IGNORE code	
	
	PRAGMAS_INLINE_CODE(ATGPartitions.PRAGMAS_INLINE_CODE),			//Java code
	PRODUCTIONS_INLINE_CODE(ATGPartitions.PRODUCTIONS_INLINE_CODE), 	//Java code
	
	// sub-states
	STRING_INLINE_CODE(ATGPartitions.STRING_INLINE_CODE, INLINE_CODE),
	STRING_PARSER_CODE(ATGPartitions.STRING_PARSER_CODE, PARSER_CODE),
	STRING_IMPORTS(ATGPartitions.STRING_IMPORTS, IMPORTS),
	STRING(ATGPartitions.STRING, DEFAULT),
	STRING_IGNORECASE_SEGMENT(ATGPartitions.STRING_IGNORECASE_SEGMENT, IGNORECASE_SEGMENT),
	STRING_CHARACTERS_SEGMENT(ATGPartitions.STRING_CHARACTERS_SEGMENT, CHARACTERS_SEGMENT),
	STRING_TOKENS_SEGMENT(ATGPartitions.STRING_TOKENS_SEGMENT, TOKENS_SEGMENT),
	STRING_PRAGMAS_SEGMENT(ATGPartitions.STRING_PRAGMAS_SEGMENT, PRAGMAS_SEGMENT),
	STRING_COMMENTS_SEGMENT(ATGPartitions.STRING_COMMENTS_SEGMENT, COMMENTS_SEGMENT),
	STRING_IGNORE_SEGMENT(ATGPartitions.STRING_IGNORE_SEGMENT, IGNORE_SEGMENT),
	STRING_PRODUCTIONS_SEGMENT(ATGPartitions.STRING_PRODUCTIONS_SEGMENT, PRODUCTIONS_SEGMENT),
	
	STRING_PRAGMAS_INLINE_CODE(ATGPartitions.STRING_PRAGMAS_INLINE_CODE, PRAGMAS_INLINE_CODE),
	STRING_PRODUCTIONS_INLINE_CODE(ATGPartitions.STRING_PRODUCTIONS_INLINE_CODE, PRODUCTIONS_INLINE_CODE),
	
	CHARACTER_INLINE_CODE(ATGPartitions.CHARACTER_INLINE_CODE, INLINE_CODE),
	CHARACTER_PARSER_CODE(ATGPartitions.CHARACTER_PARSER_CODE, PARSER_CODE),
	CHARACTER_IMPORTS(ATGPartitions.CHARACTER_IMPORTS, IMPORTS),
	CHARACTER(ATGPartitions.CHARACTER, DEFAULT),
	CHARACTER_IGNORECASE_SEGMENT(ATGPartitions.CHARACTER_IGNORECASE_SEGMENT, IGNORECASE_SEGMENT),
	CHARACTER_CHARACTERS_SEGMENT(ATGPartitions.CHARACTER_CHARACTERS_SEGMENT, CHARACTERS_SEGMENT),
	CHARACTER_TOKENS_SEGMENT(ATGPartitions.CHARACTER_TOKENS_SEGMENT, TOKENS_SEGMENT),
	CHARACTER_PRAGMAS_SEGMENT(ATGPartitions.CHARACTER_PRAGMAS_SEGMENT, PRAGMAS_SEGMENT),
	CHARACTER_COMMENTS_SEGMENT(ATGPartitions.CHARACTER_COMMENTS_SEGMENT, COMMENTS_SEGMENT),
	CHARACTER_IGNORE_SEGMENT(ATGPartitions.CHARACTER_IGNORE_SEGMENT, IGNORE_SEGMENT),
	CHARACTER_PRODUCTIONS_SEGMENT(ATGPartitions.CHARACTER_PRODUCTIONS_SEGMENT, PRODUCTIONS_SEGMENT),
	
	CHARACTER_PRAGMAS_INLINE_CODE(ATGPartitions.CHARACTER_PRAGMAS_INLINE_CODE, PRAGMAS_INLINE_CODE),
	CHARACTER_PRODUCTIONS_INLINE_CODE(ATGPartitions.CHARACTER_PRODUCTIONS_INLINE_CODE, PRODUCTIONS_INLINE_CODE),
	
	SINGLE_LINE_COMMENT_COMPILER_IDENT(ATGPartitions.SINGLE_LINE_COMMENT_COMPILER_IDENT, COMPILER_IDENT),
	SINGLE_LINE_COMMENT_INLINE_CODE(ATGPartitions.SINGLE_LINE_COMMENT_INLINE_CODE, INLINE_CODE),
	SINGLE_LINE_COMMENT_PARSER_CODE(ATGPartitions.SINGLE_LINE_COMMENT_PARSER_CODE, PARSER_CODE),
	SINGLE_LINE_COMMENT_IMPORTS(ATGPartitions.SINGLE_LINE_COMMENT_IMPORTS, IMPORTS),
	SINGLE_LINE_COMMENT(ATGPartitions.SINGLE_LINE_COMMENT, DEFAULT),
	SINGLE_LINE_COMMENT_IGNORECASE_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_IGNORECASE_SEGMENT, IGNORECASE_SEGMENT),
	SINGLE_LINE_COMMENT_CHARACTERS_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_CHARACTERS_SEGMENT, CHARACTERS_SEGMENT),
	SINGLE_LINE_COMMENT_TOKENS_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_TOKENS_SEGMENT, TOKENS_SEGMENT),
	SINGLE_LINE_COMMENT_PRAGMAS_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_PRAGMAS_SEGMENT, PRAGMAS_SEGMENT),
	SINGLE_LINE_COMMENT_COMMENTS_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_COMMENTS_SEGMENT, COMMENTS_SEGMENT),
	SINGLE_LINE_COMMENT_IGNORE_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_IGNORE_SEGMENT, IGNORE_SEGMENT),
	SINGLE_LINE_COMMENT_PRODUCTIONS_SEGMENT(ATGPartitions.SINGLE_LINE_COMMENT_PRODUCTIONS_SEGMENT, PRODUCTIONS_SEGMENT),
	
	SINGLE_LINE_COMMENT_PRAGMAS_INLINE_CODE(ATGPartitions.SINGLE_LINE_COMMENT_PRAGMAS_INLINE_CODE, PRAGMAS_INLINE_CODE),
	SINGLE_LINE_COMMENT_PRODUCTIONS_INLINE_CODE(ATGPartitions.SINGLE_LINE_COMMENT_PRODUCTIONS_INLINE_CODE, PRODUCTIONS_INLINE_CODE),
	
	MULTI_LINE_COMMENT_COMPILER_IDENT(ATGPartitions.MULTI_LINE_COMMENT_COMPILER_IDENT, COMPILER_IDENT),
	MULTI_LINE_COMMENT_INLINE_CODE(ATGPartitions.MULTI_LINE_COMMENT_INLINE_CODE, INLINE_CODE),
	MULTI_LINE_COMMENT_PARSER_CODE(ATGPartitions.MULTI_LINE_COMMENT_PARSER_CODE, PARSER_CODE),
	MULTI_LINE_COMMENT_IMPORTS(ATGPartitions.MULTI_LINE_COMMENT_IMPORTS, IMPORTS),
	MULTI_LINE_COMMENT(ATGPartitions.MULTI_LINE_COMMENT, DEFAULT),
	MULTI_LINE_COMMENT_IGNORECASE_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_IGNORECASE_SEGMENT, IGNORECASE_SEGMENT),
	MULTI_LINE_COMMENT_CHARACTERS_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_CHARACTERS_SEGMENT, CHARACTERS_SEGMENT),
	MULTI_LINE_COMMENT_TOKENS_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_TOKENS_SEGMENT, TOKENS_SEGMENT),
	MULTI_LINE_COMMENT_PRAGMAS_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_PRAGMAS_SEGMENT, PRAGMAS_SEGMENT),
	MULTI_LINE_COMMENT_COMMENTS_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_COMMENTS_SEGMENT, COMMENTS_SEGMENT),
	MULTI_LINE_COMMENT_IGNORE_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_IGNORE_SEGMENT, IGNORE_SEGMENT),
	MULTI_LINE_COMMENT_PRODUCTIONS_SEGMENT(ATGPartitions.MULTI_LINE_COMMENT_PRODUCTIONS_SEGMENT, PRODUCTIONS_SEGMENT),
	
	MULTI_LINE_COMMENT_PRAGMAS_INLINE_CODE(ATGPartitions.MULTI_LINE_COMMENT_PRAGMAS_INLINE_CODE, PRAGMAS_INLINE_CODE),
	MULTI_LINE_COMMENT_PRODUCTIONS_INLINE_CODE(ATGPartitions.MULTI_LINE_COMMENT_PRODUCTIONS_INLINE_CODE, PRODUCTIONS_INLINE_CODE),

	// special states
	INLINE_CODE_START(ATGPartitions.INLINE_CODE_START),
	INLINE_CODE_END(ATGPartitions.INLINE_CODE_END),
	
	PRAGMAS_INLINE_CODE_START(ATGPartitions.INLINE_CODE_START),
	PRAGMAS_INLINE_CODE_END(ATGPartitions.INLINE_CODE_END),
	
	PRODUCTIONS_INLINE_CODE_START(ATGPartitions.INLINE_CODE_START),
	PRODUCTIONS_INLINE_CODE_END(ATGPartitions.INLINE_CODE_END),
	;

	private final String contentType;
	private final State superState;
	private final CocoToken token;

	private State(String contentType, State superState) {
		this.contentType = contentType;
		this.superState = superState;
		this.token = new TokenImpl((contentType.equals(ATGPartitions.DEFAULT)) ? ATGPartitions.DEFAULT : contentType);
	}
	private State(String contentType) {
		this(contentType, null);
	}
	public State getSuperState() {
		return (superState == null) ? this : superState;
	}
	public String getContentType() {
		return contentType;
	}
	public CocoToken getToken() {
		return token;
	}

	
	/**
	 * @param contextState the state that the program should transfer to
	 * @return the State based on the intended context and the current state. For example : STRING -> STRING_PRODUCTIONS_SEGMENT
	 */
	private State toContext(State contextState) {
		final State wantedState = this;
		assert EnumSet.range(SINGLE_LINE_COMMENT, STRING).contains(wantedState);
		switch (contextState) {
		case DEFAULT:
			return wantedState;
		case IGNORECASE_SEGMENT: 
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_IGNORECASE_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_IGNORECASE_SEGMENT;
			case CHARACTER:
				return CHARACTER_IGNORECASE_SEGMENT;
			case STRING:
				return STRING_IGNORECASE_SEGMENT;
			}
			break;
		case CHARACTERS_SEGMENT: 
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_CHARACTERS_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_CHARACTERS_SEGMENT;
			case CHARACTER:
				return CHARACTER_CHARACTERS_SEGMENT;
			case STRING:
				return STRING_CHARACTERS_SEGMENT;
			}
			break;
		case TOKENS_SEGMENT: 
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_TOKENS_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_TOKENS_SEGMENT;
			case CHARACTER:
				return CHARACTER_TOKENS_SEGMENT;
			case STRING:
				return STRING_TOKENS_SEGMENT;
			}
			break;
		case PRAGMAS_SEGMENT: 
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_PRAGMAS_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_PRAGMAS_SEGMENT;
			case CHARACTER:
				return CHARACTER_PRAGMAS_SEGMENT;
			case STRING:
				return STRING_PRAGMAS_SEGMENT;
			}
			break;
		case COMMENTS_SEGMENT:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_COMMENTS_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_COMMENTS_SEGMENT;
			case CHARACTER:
				return CHARACTER_COMMENTS_SEGMENT;
			case STRING:
				return STRING_COMMENTS_SEGMENT;
			}
			break;
		case IGNORE_SEGMENT: 
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_IGNORE_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_IGNORE_SEGMENT;
			case CHARACTER:
				return CHARACTER_IGNORE_SEGMENT;
			case STRING:
				return STRING_IGNORE_SEGMENT;
			}
			break;
		case PRODUCTIONS_SEGMENT: 
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_PRODUCTIONS_SEGMENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_PRODUCTIONS_SEGMENT;
			case CHARACTER:
				return CHARACTER_PRODUCTIONS_SEGMENT;
			case STRING:
				return STRING_PRODUCTIONS_SEGMENT;
			}
			break;
		case IMPORTS:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_IMPORTS;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_IMPORTS;
			case CHARACTER:
				return CHARACTER_IMPORTS;
			case STRING:
				return STRING_IMPORTS;
			}
			break;
		case PARSER_CODE:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_PARSER_CODE;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_PARSER_CODE;
			case CHARACTER:
				return CHARACTER_PARSER_CODE;
			case STRING:
				return STRING_PARSER_CODE;
			}
			break;
		case INLINE_CODE:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_INLINE_CODE;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_INLINE_CODE;
			case CHARACTER:
				return CHARACTER_INLINE_CODE;
			case STRING:
				return STRING_INLINE_CODE;
			}
			break;
		case PRAGMAS_INLINE_CODE:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_PRAGMAS_INLINE_CODE;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_PRAGMAS_INLINE_CODE;
			case CHARACTER:
				return CHARACTER_PRAGMAS_INLINE_CODE;
			case STRING:
				return STRING_PRAGMAS_INLINE_CODE;
			}
			break;
		case PRODUCTIONS_INLINE_CODE:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_PRODUCTIONS_INLINE_CODE;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_PRODUCTIONS_INLINE_CODE;
			case CHARACTER:
				return CHARACTER_PRODUCTIONS_INLINE_CODE;
			case STRING:
				return STRING_PRODUCTIONS_INLINE_CODE;
			}
			break;
		case COMPILER_IDENT:
			switch (wantedState) {
			case SINGLE_LINE_COMMENT:
				return SINGLE_LINE_COMMENT_COMPILER_IDENT;
			case MULTI_LINE_COMMENT:
				return MULTI_LINE_COMMENT_COMPILER_IDENT;
			}
			break;
		}

		return DEFAULT; // return wantedState;
	}

	public State toContextOf(State other) {
		return toContext(other.getSuperState());
	}

	/** Maps content type identifiers to scanner states. */
	public static final Map<String, State> stateMap;

	static {
		stateMap = new HashMap<String, State>();

		for (State state : State.values()) {
			stateMap.put(state.getContentType(), state);
		}
	}

	public static State fromContentType(String key) {
		return stateMap.get(key);
	}
}
