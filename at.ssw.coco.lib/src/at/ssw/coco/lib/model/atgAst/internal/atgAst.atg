/*******************************************************************************
 * Copyright (C) 2011 Martin Preinfalk
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *******************************************************************************/
/*-------------------------------------------------------------------------
 compile with:
   java -jar Coco.jar atgAst.atg -package at.ssw.coco.lib.atgAst
-------------------------------------------------------------------------*/
// based on Coco.atg of the Coco/R for Java, version 2010-11-15

import at.ssw.coco.lib.atgAst.nodeTypes.*;
import java.util.HashSet;
import java.util.ArrayList;

/**
 * Parser for Coco/R Grammer that builds an Abstract Syntax Tree
 * 
 * @author Martin Preinfalk <martin.preinfalk@students.jku.at>
 *
 */
COMPILER Coco

	private RootNode root = null;
	private CompilerNode compilerNode = null;
	private GlobalFieldNode globalFieldNode = null;
	private ImportsNode importsNode = null;
	private ScannerSpecNode scannerSpecNode = null;
	private ParserSpecNode parserSpecNode = null;
	
	// returns root Node after parsing
	public RootNode getRoot() {
		return root;
	}

	// Sets for idents to compute their Kinds afterwards
	private HashSet<String> characterSets = new HashSet<String>();
	private HashSet<String> tokens = new HashSet<String>();
	private HashSet<String> pragmas = new HashSet<String>();
	private HashSet<String> productions = new HashSet<String>();
	private ArrayList<IdentNode> idents = new ArrayList<IdentNode>();

	// computes an Idents Kind by given name, has to be
	// called after parsing, when the Hashset were already filled
	private IdentNode.Kind getKindForName(String ident) {
		if (characterSets.contains(ident)) {
			return IdentNode.Kind.CHARACTER_SET;
		} else if (tokens.contains(ident)) {
			return IdentNode.Kind.TOKEN;
		} else if (pragmas.contains(ident)) {
			return IdentNode.Kind.PRAGMA;
		} else if (productions.contains(ident)) {
			return IdentNode.Kind.PRODUCTION;
		} else {		
			return IdentNode.Kind.INVALID;
		}
	}

	// computes all idents Kinds that are unknown to this point
	// has to be called after parsing, when the Hashset were already filled
	private void computeIdentKinds() {
		for (IdentNode n : idents) {
			if (n.getKind() == IdentNode.Kind.INVALID) {
				n.setKind(getKindForName(n.getIdent()));
			}
		}
	}
/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.
  stringCh  = ANY - '"' - '\\' - cr - lf.
  charCh    = ANY - '\'' - '\\' - cr - lf.
  printable = '\u0020' .. '\u007e'.
  hex       = "0123456789abcdef".

TOKENS
  ident     = letter { letter | digit }.
  number    = digit { digit }.
  string    = '"' { stringCh | '\\' printable } '"'.
  badString = '"' { stringCh | '\\' printable } (cr | lf).
  char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
  ddtSym    = '$' { digit | letter }.    
  optionSym = '$' letter { letter } '='
              { digit | letter
              | '-' | '.' | ':'
              }.                         

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Coco                            	(. 	int beg = 0; 
										int end = 0;
										root = new RootNode(beg); .)
= 
  [ // import statements 
    ANY                         	(. 	beg = t.charPos; //begin of imports 
										importsNode = new ImportsNode(beg);
										root.setImportsNode(importsNode); .)  										
    { ANY 							(.	end = t.charPos + t.val.length(); .)
    }
    								(.	importsNode.getRegion().setEnd(end); .)
  ]								

  "COMPILER"                    	(. 	beg = t.charPos; //begin of compiler
  										compilerNode = new CompilerNode(beg);
  										root.setCompilerNode(compilerNode); .)
  									
  ident                         	(. 	beg = t.charPos; //begin of ident
  										IdentNode ident = new IdentNode(beg, IdentNode.Kind.COMPILER, t.val);
  										idents.add(ident);
  										compilerNode.setIdentNode(ident); .)
  									
  									(. 	beg = end = la.pos; .)
  { ANY 							(.	end = t.charPos + t.val.length(); .)
  }                            	 
  									(. 	if (end > beg) {
  											globalFieldNode = new GlobalFieldNode(beg, end);
											compilerNode.setGlobalFieldNode(globalFieldNode);
										} .)
								
									(.	beg = la.pos; //begin of scannerSpec
										scannerSpecNode = new ScannerSpecNode(beg); 
										compilerNode.setScannerSpecNode(scannerSpecNode); .)
  [ "IGNORECASE"					(.	scannerSpecNode.setIgnoreCase(true); .)
  ]               
  
  [ "CHARACTERS"              
    {								(.	SetDeclNode setDeclNode; .)
    SetDecl<out setDeclNode>		(.	scannerSpecNode.addSetDeclNode(setDeclNode); .)
    }          
  ]
  [ "TOKENS"             		
    { 								(.	TokenDeclNode tokenDeclNode; .)
    TokenDecl<out tokenDeclNode>	(.	tokenDeclNode.getRegion().setEnd(t.charPos + t.val.length());
    									tokenDeclNode.getSymbolNode().getIdentNode().setKind(IdentNode.Kind.TOKEN);
    									tokens.add(tokenDeclNode.getSymbolNode().getIdentNode().getIdent());
    									scannerSpecNode.addTokenDeclNode(tokenDeclNode); .)
    }
  ]
  [ "PRAGMAS"                 	 
    { 								(.	TokenDeclNode tokenDeclNode; .)
    TokenDecl<out tokenDeclNode>	(.	tokenDeclNode.getRegion().setEnd(t.charPos + t.val.length());
    									tokenDeclNode.getSymbolNode().getIdentNode().setKind(IdentNode.Kind.PRAGMA);
    									pragmas.add(tokenDeclNode.getSymbolNode().getIdentNode().getIdent());
    									scannerSpecNode.addPragmaDeclNode(tokenDeclNode); .)
    }
  ]            
  { "COMMENTS" 		         		(.	CommentDeclNode commentDeclNode = new CommentDeclNode(t.charPos);
  										TokenExprNode from, to; .)        
                                
    "FROM" TokenExpr<out from>	 	(.	commentDeclNode.setFrom(from); .)
    "TO" TokenExpr<out to>     	 	(.	commentDeclNode.setTo(to); .)
    [ "NESTED"                  	(.	commentDeclNode.setNested(true); .)
    ]                           	(.	commentDeclNode.getRegion().setEnd(t.charPos + t.val.length()); 
    									scannerSpecNode.addCommentDeclNode(commentDeclNode); .)
                                
  } 
  { "IGNORE"						(. 	SetNode setNode; 
  										WhiteSpaceDeclNode whiteSpaceDeclNode = new WhiteSpaceDeclNode(t.charPos); .)
    Set<out setNode>           	 	(.	whiteSpaceDeclNode.setSetNode(setNode);
    									whiteSpaceDeclNode.getRegion().setEnd(t.charPos + t.val.length()); 
    									scannerSpecNode.addWhiteSpaceDeclNode(whiteSpaceDeclNode); .)
  }                       			(. 	scannerSpecNode.getRegion().setEnd(t.charPos + t.val.length()); .)      
  SYNC
  "PRODUCTIONS"						(.	parserSpecNode = new ParserSpecNode(t.charPos);
  										compilerNode.setParserSpecNode(parserSpecNode); 
  										SemTextNode semTextNode; 
  										AttrDeclNode attrDeclNode; 
  										ExpressionNode expressionNode; .)                
  { 								 
  	ident                      		(.	IdentNode identNode = new IdentNode(
													t.charPos,
													IdentNode.Kind.PRODUCTION,
													t.val);
										idents.add(identNode);
										productions.add(t.val);
										ProductionNode productionNode = new ProductionNode(t.charPos, identNode); .)
    [ 
    	AttrDecl<out attrDeclNode>	(.  productionNode.setAttrDeclNode(attrDeclNode); .)
    ] 
    [ 
    	SemText<out semTextNode>	(.	productionNode.setSemTextNode(semTextNode); .) 
    ]
    WEAK '='
    Expression<out expressionNode>	(.	if (expressionNode != null) 
    										productionNode.setExpressionNode(expressionNode); .)
    WEAK '.'						(. 	productionNode.getRegion().setEnd(t.charPos + t.val.length()); 
    									parserSpecNode.addProductionNode(productionNode); .)                   
  }									(.	parserSpecNode.getRegion().setEnd(t.charPos + t.val.length()); .)
   
  "END" ident 						(. 	ident = new IdentNode(t.charPos, IdentNode.Kind.COMPILER, t.val);
  										idents.add(ident);
  										compilerNode.setEndMarkerIdent(ident); .)
  '.'      	        				(.	end = t.charPos + t.val.length(); 
  										compilerNode.getRegion().setEnd(end);
  										root.getRegion().setEnd(end); 
  										computeIdentKinds(); .)
.

/*------------------------------------------------------------------------------------*/

SetDecl<out SetDeclNode setDeclNode> (.	SetNode setNode; .)  
=
  ident         					(.	setDeclNode = new SetDeclNode(t.charPos);
  										IdentNode identNode = new IdentNode(t.charPos, IdentNode.Kind.CHARACTER_SET, t.val);
  										characterSets.add(t.val);
  										idents.add(identNode);
  										setDeclNode.setIdentNode(identNode); .)            
  '=' Set<out setNode>         		(.	setDeclNode.setSetNode(setNode); .)
  '.'								(.	setDeclNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.


/*------------------------------------------------------------------------------------*/

Set<out SetNode setNode>      		(.	setNode = new SetNode(la.charPos);
										SimSetNode simSetNode; .)       
=
  SimSet<out simSetNode>			(.	setNode.setSimSetNode(simSetNode); .)
  { 								(. 	OpSetNode opSetNode = new OpSetNode(la.charPos); .)
  '+' SimSet<out simSetNode>		(.	opSetNode.setSetOp(OpSetNode.SetOp.SETOP_PLUS);
  										opSetNode.setSimSetNode(simSetNode); 
  										opSetNode.getRegion().setEnd(t.charPos + t.val.length());
  		 								setNode.addOpSetNode(opSetNode); .)
  									         			
  | 								(. 	OpSetNode opSetNode = new OpSetNode(la.charPos); .)
  '-' SimSet<out simSetNode>		(.	opSetNode.setSetOp(OpSetNode.SetOp.SETOP_MINUS);
  										opSetNode.setSimSetNode(simSetNode); 
  										opSetNode.getRegion().setEnd(t.charPos + t.val.length());
  		 								setNode.addOpSetNode(opSetNode); .)      
  }									(. 	setNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.

/*------------------------------------------------------------------------------------*/

SimSet<out SimSetNode simSetNode>   (.	char from, to; 
											simSetNode = null; .)     
=
( ident 						(.	IdentNode identNode = new IdentNode(
													t.charPos,
													IdentNode.Kind.INVALID,
													t.val);
									idents.add(identNode);
									simSetNode = new SimSetNode(t.charPos, identNode); .)    

| string  		 				(.	String s = t.val.substring(1, t.val.length() - 1);
									simSetNode = new SimSetNode(t.charPos, s); 
									simSetNode.getRegion().setEnd(t.charPos + t.val.length()); .)

| Char<out from>            	(.	simSetNode = new SimSetNode(t.charPos, from); .) 
  [ ".." Char<out to>       	(.	simSetNode.setTo(to); .)           
  ]								(.	simSetNode.getRegion().setEnd(t.charPos + t.val.length()); .)

| "ANY"                     	(.	simSetNode = new SimSetNode(t.charPos);
									simSetNode.setKind(SimSetNode.Kind.ANY);
									simSetNode.getRegion().setEnd(t.charPos + t.val.length()); .)   
)
.

/*--------------------------------------------------------------------------------------*/

Char<out char c>
=
  char							(. 	c = 0;
									try {
										String s = EscapeSeqUtil.unescape(t.val);
										c = s.toCharArray()[1]; 
									} catch (Exception e) {
										SemErr (e.getMessage());
									} .)
.

/*------------------------------------------------------------------------------------*/

TokenDecl<out TokenDeclNode tokenDeclNode>	(.	tokenDeclNode = new TokenDeclNode(la.charPos); 
												SymbolNode symbolNode;
												SemTextNode semTextNode; 
												TokenExprNode tokenExprNode; .)
=
  Sym<out symbolNode>		     			(.	tokenDeclNode.setSymbolNode(symbolNode); 
  												tokens.add(symbolNode.getIdentNode().getIdent());.)
  SYNC
  
  ( '=' TokenExpr<out tokenExprNode>		(.	tokenDeclNode.setTokenExprNode(tokenExprNode); .) 
  '.' | )					
  [ SemText<out semTextNode>				(.	tokenDeclNode.setSemTextNode(semTextNode); .)
  ]        									(.	tokenDeclNode.getRegion().setEnd(t.charPos + t.val.length()); .)  
.											


/*------------------------------------------------------------------------------------*/


AttrDecl<out AttrDeclNode attrDeclNode>     (. 	attrDeclNode = new AttrDeclNode(la.charPos); 
												TypeNameNode typeNameNode; .)       
= 
  '<'                           // attributes denoted by < ... >
  ( ('^' | "out")               (.	OutAttrDeclNode outAttrDeclNode = new OutAttrDeclNode(t.charPos); .)
    TypeName<out typeNameNode>	(.	outAttrDeclNode.setTypeNameNode(typeNameNode); .)                    
    ident						(.	IdentNode identNode = new IdentNode(
													t.charPos,
													IdentNode.Kind.ATTRIBUTE,
													t.val);
									idents.add(identNode);
									outAttrDeclNode.setIdentNode(identNode);
    								outAttrDeclNode.getRegion().setEnd(t.charPos + t.val.length()); 
    								attrDeclNode.setOutAttrDeclNode(outAttrDeclNode); .)                       
    ( '>'
    | ','						(.	int beg = la.charPos; .) 
      { ANY
      | badString               
		  }						(.	int end = t.charPos + t.val.length();
		  							if (end > beg) {
	  									InAttrDeclNode inAttrDeclNode = new InAttrDeclNode(beg);
	  									inAttrDeclNode.getRegion().setEnd(end); 
		  								attrDeclNode.setInAttrDeclNode(inAttrDeclNode); 
		  							} .)            
	  '>'                 		
    )
  |                             (.	int beg = la.charPos; .)
	  {  ANY
	  | badString               
	  }							(.	int end = t.charPos + t.val.length();
		  							if (end > beg) {
	  									InAttrDeclNode inAttrDeclNode = new InAttrDeclNode(beg);
	  									inAttrDeclNode.getRegion().setEnd(end); 
		  								attrDeclNode.setInAttrDeclNode(inAttrDeclNode); 
		  							} .) 
	  '>'                     
  )								(.	attrDeclNode.getRegion().setEnd(t.charPos + t.val.length()); .)
|
  "<."                          // attributes denoted by <. ... .>
  ( ('^' | "out")               (.	OutAttrDeclNode outAttrDeclNode = new OutAttrDeclNode(t.charPos); .)
    TypeName<out typeNameNode> 	(.	outAttrDeclNode.setTypeNameNode(typeNameNode); .)                   
    ident                       (.	IdentNode identNode = new IdentNode(
													t.charPos,
													IdentNode.Kind.ATTRIBUTE,
													t.val);
									idents.add(identNode);
									outAttrDeclNode.setIdentNode(identNode);
    								outAttrDeclNode.getRegion().setEnd(t.charPos + t.val.length()); 
    								attrDeclNode.setOutAttrDeclNode(outAttrDeclNode); .)
    ( ".>"
    | ','                     	(.	int beg = la.charPos; .) 
      { ANY
      | badString               
		  }						(.	int end = t.charPos + t.val.length();
		  							if (end > beg) {
	  									InAttrDeclNode inAttrDeclNode = new InAttrDeclNode(beg);
	  									inAttrDeclNode.getRegion().setEnd(end); 
		  								attrDeclNode.setInAttrDeclNode(inAttrDeclNode); 
		  							} .) 
	  ".>"                
    )
  |                       		(.	int beg = la.charPos; .)      
	  {  ANY
	  | badString               
	  }							(.	int end = t.charPos + t.val.length();
		  							if (end > beg) {
	  									InAttrDeclNode inAttrDeclNode = new InAttrDeclNode(beg);
	  									inAttrDeclNode.getRegion().setEnd(end); 
		  								attrDeclNode.setInAttrDeclNode(inAttrDeclNode); 
		  							} .) 
	  ".>"                   	
  )								(.	attrDeclNode.getRegion().setEnd(t.charPos + t.val.length()); .)
  .

/*------------------------------------------------------------------------------------*/
// type names may contain angle brackets for generics
TypeName<out TypeNameNode typeNameNode>		(.	typeNameNode = new TypeNameNode(la.charPos); 
												TypeNameNode dummy;.)
= 
ident															 
{
	'.' ident | '[' ']' | '<' TypeName<out dummy> {',' TypeName<out dummy>} '>'
}											(.	typeNameNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.

/*------------------------------------------------------------------------------------*/

Expression<out ExpressionNode expressionNode>	(.	expressionNode = new ExpressionNode(la.charPos); 
													TermNode termNode; .)    
=
  Term<out termNode>       	(.	if (termNode != null) expressionNode.addTermNode(termNode); .) //Term might be empty
  { WEAK '|'
    Term<out termNode>    	(.	if (termNode != null) expressionNode.addTermNode(termNode); .) //Term might be empty
  }							(.	expressionNode.getRegion().setEnd(t.charPos + t.val.length()); 
  								if (expressionNode.getRegion().getLength() <= 0) { //Term might be empty
  									expressionNode = null; 
  								} .)
.

/*------------------------------------------------------------------------------------*/


Term<out TermNode termNode>		(.	FactorNode factorNode;
									ResolverNode resolverNode;
									termNode = null; .)
=
( 								(.	termNode = new TermNode(la.charPos); .)
  [
    Resolver<out resolverNode>	(.	termNode.setResolverNode(resolverNode); .)
  ]
  Factor<out factorNode>		(.	termNode.addFactorNode(factorNode); .)
  { Factor<out factorNode>		(.	termNode.addFactorNode(factorNode); .)
  }								(.	termNode.getRegion().setEnd(t.charPos + t.val.length()); .)
|								
)
.

/*------------------------------------------------------------------------------------*/

Factor<out FactorNode factorNode>			(.	factorNode = new FactorNode(la.charPos);
												SymbolNode symbolNode;
												AttribsNode attribsNode;
												SemTextNode semTextNode; 
												ExpressionNode expressionNode; .)
=
( [ "WEAK"									(.	factorNode.setWeakSymbol(true); .)
  ]
  Sym<out symbolNode>						(.	factorNode.setKind(FactorNode.Kind.SYMBOL);
  												factorNode.setSymbolNode(symbolNode); .)
  [ Attribs<out attribsNode>				(.	factorNode.setAttribsNode(attribsNode); .)
  ]
| '(' Expression<out expressionNode> ')'	(.	factorNode.setKind(FactorNode.Kind.PAR);
  												factorNode.setExpressionNode(expressionNode); .)
| '[' Expression<out expressionNode> ']'	(.	factorNode.setKind(FactorNode.Kind.OPTIONAL);
  												factorNode.setExpressionNode(expressionNode); .)
| '{' Expression<out expressionNode> '}'	(.	factorNode.setKind(FactorNode.Kind.ARBITRARY_OFTEN);
  												factorNode.setExpressionNode(expressionNode); .)
| SemText<out semTextNode>					(.	factorNode.setKind(FactorNode.Kind.SEM_TEXT);
  												factorNode.setSemTextNode(semTextNode); .)
| "ANY"										(.	factorNode.setKind(FactorNode.Kind.ANY); .)
| "SYNC"									(.	factorNode.setKind(FactorNode.Kind.SYNC); .)
)											(.	factorNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.


/*------------------------------------------------------------------------------------*/

Resolver<out ResolverNode resolverNode>	(.	resolverNode = new ResolverNode(la.charPos); .)
=
  "IF" "("
  Condition		(. resolverNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.


/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

TokenExpr<out TokenExprNode tokenExprNode>	(.	tokenExprNode = new TokenExprNode(la.charPos); 
												TokenTermNode tokenTermNode; .)
=
  TokenTerm<out tokenTermNode>				(.	tokenExprNode.addTokenTermNode(tokenTermNode); .)
  { WEAK '|'
    TokenTerm<out tokenTermNode>			(.	tokenExprNode.addTokenTermNode(tokenTermNode); .)
  }											(.	tokenExprNode.getRegion().setEnd(t.charPos + t.val.length()); .) 
.

/*------------------------------------------------------------------------------------*/

TokenTerm<out TokenTermNode tokenTermNode>	(.	tokenTermNode = new TokenTermNode(la.charPos); 
												TokenFactorNode tokenFactorNode; 
												TokenExprNode tokenExprNode;.)
=
  TokenFactor<out tokenFactorNode>			(.	tokenTermNode.addTokenFactorNode(tokenFactorNode); .)
  { TokenFactor<out tokenFactorNode>		(.	tokenTermNode.addTokenFactorNode(tokenFactorNode); .)
  }
  [ "CONTEXT"
    '(' TokenExpr<out tokenExprNode>		(.	tokenTermNode.setContextTokenExprNode(tokenExprNode); .)
    ')'
  ]											(.	tokenTermNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.

/*------------------------------------------------------------------------------------*/

TokenFactor<out TokenFactorNode tokenFactorNode>	(.	tokenFactorNode = new TokenFactorNode(la.charPos); 
														SymbolNode symbolNode; 
														TokenExprNode tokenExprNode; .)
=

( Sym<out symbolNode>						(.	tokenFactorNode.setKind(TokenFactorNode.Kind.SYMBOL); 
												tokenFactorNode.setSymbolNode(symbolNode); .)
| '(' TokenExpr<out tokenExprNode> ')'		(.	tokenFactorNode.setKind(TokenFactorNode.Kind.PAR); 
												tokenFactorNode.setTokenExprNode(tokenExprNode); .)
| '[' TokenExpr<out tokenExprNode> ']'		(.	tokenFactorNode.setKind(TokenFactorNode.Kind.OPTIONAL); 
												tokenFactorNode.setTokenExprNode(tokenExprNode); .)
| '{' TokenExpr<out tokenExprNode> '}'		(.	tokenFactorNode.setKind(TokenFactorNode.Kind.ARBITRARY_OFTEN); 
												tokenFactorNode.setTokenExprNode(tokenExprNode); .)
)											(.	tokenFactorNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.

/*------------------------------------------------------------------------------------*/

Sym<out SymbolNode symbolNode>		(.	symbolNode=null; .)
=
  ( ident			(.	IdentNode identNode = new IdentNode(
													t.charPos,
													IdentNode.Kind.INVALID,
													t.val);
						idents.add(identNode);
  						symbolNode = new SymbolNode(t.charPos, identNode);
  						symbolNode.getRegion().setEnd(t.charPos + t.val.length()); .)  
  | 
  	( string 		(.	String s = t.val.substring(1, t.val.length() - 1);
  						symbolNode = new SymbolNode(t.charPos, s);
  						symbolNode.getRegion().setEnd(t.charPos + t.val.length()); .)
  	| 
  	char			(.	symbolNode = new SymbolNode(t.charPos, t.val.charAt(1));
  						symbolNode.getRegion().setEnd(t.charPos + t.val.length()); .) 
  	)
  )
.


/*------------------------------------------------------------------------------------*/

Attribs<out AttribsNode attribsNode>	(. 	attribsNode = new AttribsNode(la.charPos); .)       
=
  '<'                           // attributes denoted by < ... >
  ( ('^' | "out")				(.	OutAttribsNode outAttribsNode = new OutAttribsNode(t.charPos); .)
    { ANY
    | Bracketed
    | badString
    }							(.	outAttribsNode.getRegion().setEnd(t.charPos + t.val.length()); 
    								attribsNode.setOutAttribsNode(outAttribsNode); .)	
    ( '>'
    | ','						(.	int beg = la.charPos; .)
      {  ANY
       | badString
      }							(.	int end = t.charPos + t.val.length();
		  							if (end > beg) {
	  									InAttribsNode inAttribsNode = new InAttribsNode(beg);
	  									inAttribsNode.getRegion().setEnd(end); 
		  								attribsNode.setInAttribsNode(inAttribsNode); 
		  							} .) 
      '>'
    )
  |								(.	int beg = la.charPos; .)
    {  ANY
     | badString
    }							(.	int end = t.charPos + t.val.length();
    								if (end > beg) {
    									InAttribsNode inAttribsNode = new InAttribsNode(beg); 
    									inAttribsNode.getRegion().setEnd(end); 
		  								attribsNode.setInAttribsNode(inAttribsNode); 
		  							} .) 
    '>'
  )								(.	attribsNode.getRegion().setEnd(t.charPos + t.val.length()); .)
|
  "<."                          // attributes denoted by <. ... .>
  ( ('^' | "out")				(.	OutAttribsNode outAttribsNode = new OutAttribsNode(t.charPos); .)
    { ANY
    | Bracketed
    | badString
    }							(.	outAttribsNode.getRegion().setEnd(t.charPos + t.val.length()); 
    								attribsNode.setOutAttribsNode(outAttribsNode); .)	
    ( ".>"
    | ','						(.	int beg = la.charPos; .)
      {  ANY
       | badString
      } 						(.	int end = t.charPos + t.val.length();
		  							if (end > beg) {
	  									InAttribsNode inAttribsNode = new InAttribsNode(beg);
	  									inAttribsNode.getRegion().setEnd(end); 
		  								attribsNode.setInAttribsNode(inAttribsNode); 
		  							} .)
	  ".>"
    )
  |								(.	int beg = la.charPos; .)
    {  ANY
     | badString
    }							(.	int end = t.charPos + t.val.length();
    								if (end > beg) {
    									InAttribsNode inAttribsNode = new InAttribsNode(beg); 
    									inAttribsNode.getRegion().setEnd(end); 
		  								attribsNode.setInAttribsNode(inAttribsNode); 
		  							} .) 
    ".>"
  )								(.	attribsNode.getRegion().setEnd(t.charPos + t.val.length()); .)
.


/*------------------------------------------------------------------------------------*/
// skip commas in brackets such as in <out a[i, j], b> or <out a[foo(x, y)], z>
Bracketed
= '(' {Bracketed | ANY} ')' | '[' {Bracketed | ANY} ']'.

/*------------------------------------------------------------------------------------*/

SemText<out SemTextNode semTextNode>
=
  "(."      	(.	semTextNode = new SemTextNode(t.charPos); .)
  { ANY			
  | badString                   
  | "(."                        
  }
  ".)"			(.	semTextNode.getRegion().setEnd(t.charPos + t.val.length()); .) 
.

END Coco.
